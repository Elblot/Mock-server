package load;

import model.LTS;
import model.RequestT;
import model.ResponseT;
import model.State;
import model.Transition;

public class DotLoader implements Loader {

	@Override
	public LTS load(String str) throws LoaderException {
		LTS lts = new LTS();
		
		str = str.substring(29);
		str = str.replace("S00 -> S1", "S00 -> S1[];");
		String[] dot = str.split("];");
		int i = 0;			
		String line = dot[i] + "]";
		//TODO clean this step
		
		
		while (!line.startsWith("}")){
			System.out.println(line);
			if (line.contains("shape=circle")) { /* it is the case if generated by COnfECt or ASSESS */
				String statename = line.substring(0, line.indexOf("["));
				State state = new State(statename);
				lts.addState(state);
			}
			else if (line.contains("shape=doublecircle")) {
				String statename = line.substring(0, line.indexOf("["));
				State state = new State(statename);
				state.setFinal();
				lts.addState(state);
			}
			else if (line.contains("->") & !line.contains("S00")) {
				String keySource = line.substring(0, line.indexOf(" ->"));
				String keyTarget = line.substring(line.indexOf(" ->")+4, line.indexOf("["));
				State source = lts.getState(keySource);
				State target = lts.getState(keyTarget);
				String trname = line.substring(line.indexOf("label =")+8, line.length() -1);
				Transition transition;
				if (trname.contains("status=")) { // TODO find how to differentiate responses and requests
					transition = new ResponseT(source, trname, target);
				}
				else{
					transition = new RequestT(source, trname, target);
				}
				lts.addTransition(transition);
				source.addSuccesseur(transition);
				target.addPredecesseur(transition);
			}
			else if (line.contains("->") & line.contains("S00")) {
				String init = "";
				if (line.contains("[")) {
					init = line.substring(line.indexOf(" ->")+4, line.indexOf("["));
				}
				else {
					init = line.substring(line.indexOf(" ->")+4);
				}
				lts.setInitialState(lts.getState(init));
			}
			i++;
			line = dot[i];
		}
		lts.buildResp();
		return lts;
	}

}
